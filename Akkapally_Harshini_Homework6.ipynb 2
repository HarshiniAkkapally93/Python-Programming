{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "5ba63aa4",
   "metadata": {},
   "source": [
    "## DATA 690 Homework 6 (70 points - Due on Sunday, October 23, 2022 by 11:00 pm ET)\n",
    "\n",
    "The output of this assignment for submission should be in PDF format **AND** .py or .ipynb. The name of the file should be as follows: Lastname_Firstname_Homework6.pdf (example: Thomas_Sunela_Homework6.pdf) **AND** Lastname_Firstname_Homework6.ipynb (example: Thomas_Sunela_Assignment6.ipynb. In short, you are submitting the python notebook as well as the pdf of that notebook. Do **NOT** submit .html file, the system will give you an error.\n",
    "\n",
    "    \n",
    "Incorrect file name will cost you points!<br>\n",
    "\n",
    "Instructions for converting a Jupyter Python notebook to PDF: Go to the menu and choose, File --> Download As --> html. Open that html file and print it to PDF. Submit the PDF file **NOT** the html file.\n",
    "\n",
    "If you are using Google Colab, remember to review the PDF before submitting to ensure that all cells and answers are displayed in the PDF.\n",
    "\n",
    "**Things to note:**\n",
    "\n",
    "* Each cell should display an output\n",
    "* Use both Markdown and code comments in the Jupyter Notebook as needed"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eb0b3840",
   "metadata": {},
   "source": [
    "The data has been loaded for you in the cell below. Google Forms always uses the questions in the survey as the column names in the Responses spreadsheet. To make your life easier, the columns have been given shorter, easier to use names. If you are unsure of what a name means, please consult the PDF version of the form above."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "9c846483",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>timestamp</th>\n",
       "      <th>sex</th>\n",
       "      <th>handspan</th>\n",
       "      <th>height</th>\n",
       "      <th>shoe_size</th>\n",
       "      <th>hair_color</th>\n",
       "      <th>mother_height</th>\n",
       "      <th>mother_shoe_size</th>\n",
       "      <th>mother_hair_color</th>\n",
       "      <th>father_height</th>\n",
       "      <th>father_shoe_size</th>\n",
       "      <th>father_hair_color</th>\n",
       "      <th>athlete</th>\n",
       "      <th>shoulder_width</th>\n",
       "      <th>skull_circum</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>9/20/2018 12:21:27</td>\n",
       "      <td>Male</td>\n",
       "      <td>7.75</td>\n",
       "      <td>NaN</td>\n",
       "      <td>9.5</td>\n",
       "      <td>Black</td>\n",
       "      <td>63.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>Brown</td>\n",
       "      <td>69.0</td>\n",
       "      <td>10.5</td>\n",
       "      <td>Black</td>\n",
       "      <td>No</td>\n",
       "      <td>18.00</td>\n",
       "      <td>22.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>9/20/2018 18:43:07</td>\n",
       "      <td>Male</td>\n",
       "      <td>8.50</td>\n",
       "      <td>67.00</td>\n",
       "      <td>8.5</td>\n",
       "      <td>Blonde</td>\n",
       "      <td>62.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>Brown</td>\n",
       "      <td>74.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>Blonde</td>\n",
       "      <td>Yes</td>\n",
       "      <td>16.00</td>\n",
       "      <td>24.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>9/20/2018 18:53:27</td>\n",
       "      <td>Female</td>\n",
       "      <td>7.00</td>\n",
       "      <td>62.00</td>\n",
       "      <td>7.0</td>\n",
       "      <td>Black</td>\n",
       "      <td>61.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>Black</td>\n",
       "      <td>65.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>Black</td>\n",
       "      <td>Yes</td>\n",
       "      <td>15.00</td>\n",
       "      <td>22.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>9/20/2018 20:13:04</td>\n",
       "      <td>Male</td>\n",
       "      <td>8.00</td>\n",
       "      <td>68.25</td>\n",
       "      <td>9.0</td>\n",
       "      <td>Brown</td>\n",
       "      <td>58.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Blonde</td>\n",
       "      <td>70.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>Black</td>\n",
       "      <td>No</td>\n",
       "      <td>17.25</td>\n",
       "      <td>21.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>9/20/2018 20:31:44</td>\n",
       "      <td>NaN</td>\n",
       "      <td>10.00</td>\n",
       "      <td>71.00</td>\n",
       "      <td>11.0</td>\n",
       "      <td>Black</td>\n",
       "      <td>NaN</td>\n",
       "      <td>9.0</td>\n",
       "      <td>Black</td>\n",
       "      <td>NaN</td>\n",
       "      <td>11.0</td>\n",
       "      <td>Black</td>\n",
       "      <td>No</td>\n",
       "      <td>19.00</td>\n",
       "      <td>22.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            timestamp     sex  handspan  height  shoe_size hair_color  \\\n",
       "0  9/20/2018 12:21:27    Male      7.75     NaN        9.5      Black   \n",
       "1  9/20/2018 18:43:07    Male      8.50   67.00        8.5     Blonde   \n",
       "2  9/20/2018 18:53:27  Female      7.00   62.00        7.0      Black   \n",
       "3  9/20/2018 20:13:04    Male      8.00   68.25        9.0      Brown   \n",
       "4  9/20/2018 20:31:44     NaN     10.00   71.00       11.0      Black   \n",
       "\n",
       "   mother_height  mother_shoe_size mother_hair_color  father_height  \\\n",
       "0           63.0               7.0             Brown           69.0   \n",
       "1           62.0               6.0             Brown           74.0   \n",
       "2           61.0               6.0             Black           65.0   \n",
       "3           58.0               NaN            Blonde           70.0   \n",
       "4            NaN               9.0             Black            NaN   \n",
       "\n",
       "   father_shoe_size father_hair_color athlete  shoulder_width  skull_circum  \n",
       "0              10.5             Black      No           18.00         22.25  \n",
       "1              11.0            Blonde     Yes           16.00         24.00  \n",
       "2               9.0             Black     Yes           15.00         22.00  \n",
       "3              10.0             Black      No           17.25         21.75  \n",
       "4              11.0             Black      No           19.00         22.00  "
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Import libraries and data\n",
    "\n",
    "import pandas as pd\n",
    "%matplotlib inline\n",
    "\n",
    "body_data = pd.read_csv('survey_body_measurements.csv')\n",
    "col_names = ['timestamp', 'sex', 'handspan', 'height', \n",
    "             'shoe_size','hair_color', 'mother_height', 'mother_shoe_size',\n",
    "             'mother_hair_color', 'father_height', 'father_shoe_size',\n",
    "             'father_hair_color','athlete','shoulder_width','skull_circum']\n",
    "body_data.columns = col_names\n",
    "body_data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cc0de6d0",
   "metadata": {},
   "source": [
    "### Problem 1: (3 points)\n",
    "\n",
    "<span  style=\"color:purple; font-size:16px\"> Create a scatterplot of `height` (y-axis) versus `handspan` (x-axis). </span>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d9191c8a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:title={'center':'Height versus Handspan'}, xlabel='handspan', ylabel='height'>"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Answer\n",
    "#scatterplot of height (y-axis) versus handspan (x-axis)\n",
    "body_data.plot(kind = 'scatter',\n",
    "       x= 'handspan',\n",
    "       y= 'height',\n",
    "       title = 'Height versus Handspan',\n",
    "       c='blue')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ff6691ab",
   "metadata": {},
   "source": [
    "Whoa! That doesn't look right! The people that responded to the survey must have mixed up measurement units!"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b29b7302",
   "metadata": {},
   "source": [
    "### Problem 2: (3 points)\n",
    "\n",
    "<span  style=\"color:purple; font-size:16px\">Set observations where `handspan` is greater than 30 or less than 4 to be missing using `pd.np.nan`. (Hint: Create a Boolean filter for the observations you want to remove. Extract the index for these observations and then using the `.loc[]` method, set the `handspan` values for these observations to `pd.np.nan`, the Numpy value that represents missing values.</span>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "0f3f481e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Int64Index([37, 53, 65, 76, 86, 95], dtype='int64')"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Answer\n",
    "filt = (body_data['handspan'] > 30) | (body_data['handspan'] < 4)\n",
    "body_data[filt].index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "0132affc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "37    58.0\n",
       "53    70.0\n",
       "65    66.0\n",
       "76     3.5\n",
       "86     3.5\n",
       "95     3.5\n",
       "Name: handspan, dtype: float64"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#set the handspan values for these observations to pd.np.nan\n",
    "body_data['handspan'].loc[body_data[filt].index]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "604400f5",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/4w/0z1hsmc17gq8cf0vjq9jxmrw0000gn/T/ipykernel_10466/62069923.py:1: FutureWarning: The pandas.np module is deprecated and will be removed from pandas in a future version. Import numpy directly instead\n",
      "  body_data['handspan'].loc[body_data[filt].index] = pd.np.nan\n",
      "/Users/sraharsh/opt/anaconda3/lib/python3.9/site-packages/pandas/core/indexing.py:1732: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self._setitem_single_block(indexer, value, name)\n"
     ]
    }
   ],
   "source": [
    "body_data['handspan'].loc[body_data[filt].index] = pd.np.nan"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e347a90f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "37   NaN\n",
       "53   NaN\n",
       "65   NaN\n",
       "76   NaN\n",
       "86   NaN\n",
       "95   NaN\n",
       "Name: handspan, dtype: float64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#To check if the handspan values for observations are set pd.np.nan\n",
    "body_data['handspan'].loc[body_data[filt].index]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2541f7f2",
   "metadata": {},
   "source": [
    "### Problem 3: (3 points)\n",
    "\n",
    "<span  style=\"color:purple; font-size:16px\">Re-create the scatterplot of `height` (x-axis) versus `handspan` (y-axis) now that you have removed the problem observations. Describe the resulting relationship between an individual's `handspan` and their `height`. Make sure to address the form, strength, and direction of the relationship.</span>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "9a6b5186",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:title={'center':'Height versus Handspan'}, xlabel='handspan', ylabel='height'>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Answer\n",
    "body_data.plot(kind = 'scatter',\n",
    "       x= 'handspan',\n",
    "       y= 'height',\n",
    "       title = 'Height versus Handspan',\n",
    "       c='blue')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "253b7fbe",
   "metadata": {},
   "source": [
    "Written Response:\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6a51dd81",
   "metadata": {},
   "source": [
    "From the above scatter plot we can say that \n",
    "\n",
    "The relationship between hand span and height has observed to be positive, moderately strong, and linear\n",
    "\n",
    "- The direction of the relationship is positive, the points of the scatterplot go up from left to right. So the height and handspan has the positive association between them.\n",
    "- The form of the relationship is linear because the points on the scatterplot closely resemble a straight line. A relationship is linear if one variable increases by approximately the same rate as the other variables changes by one unit.\n",
    "- The strength of the relationship is moderate because the points of the scatterplot are slightly spread.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1cbf4c37",
   "metadata": {},
   "source": [
    "### Problem 4: (3 points)\n",
    "\n",
    "<span  style=\"color:purple; font-size:16px\">Import the Seaborn library and the `regplot()` function to fit a line of best fit through the data to describe the relationship between `handspan` and `height`.</span>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "9e038d5c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='handspan', ylabel='height'>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Answer\n",
    "import seaborn as sns\n",
    "\n",
    "# draw regplot\n",
    "sns.regplot(x= 'handspan',\n",
    "            y= 'height', \n",
    "            data = body_data)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6f08c574",
   "metadata": {},
   "source": [
    "The relationship between hand span and height has observed to be positive, moderately strong, and linear"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "19733502",
   "metadata": {},
   "source": [
    "### Problem 5: (3 points)\n",
    "\n",
    "<span  style=\"color:purple; font-size:16px\">Using the `regplot` output above, what is the approximate average height of a person with a `handspan` of 6 inches? What is the approximate height of a person with a `handspan` of 10 inches? (Note: you do **not** need to perform any calculations or write any code to answer this question.)</span>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4edda71d",
   "metadata": {},
   "source": [
    "#### Written Answer\n",
    "\n",
    "##### Approximate height when handspan 6 inches\n",
    "65\n",
    "\n",
    "##### Approximate height when handspan 10 inches\n",
    "72 (Approximately 70)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "82c31022",
   "metadata": {},
   "source": [
    "### Problem 6: (3 points)\n",
    "\n",
    "<span  style=\"color:purple; font-size:16px\">Create a correlation matrix of `height`, `shoe_size`, and `handspan`. </span>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "981b9898",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>height</th>\n",
       "      <th>shoe_size</th>\n",
       "      <th>handspan</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>height</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.777465</td>\n",
       "      <td>0.388108</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>shoe_size</th>\n",
       "      <td>0.777465</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.480116</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>handspan</th>\n",
       "      <td>0.388108</td>\n",
       "      <td>0.480116</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             height  shoe_size  handspan\n",
       "height     1.000000   0.777465  0.388108\n",
       "shoe_size  0.777465   1.000000  0.480116\n",
       "handspan   0.388108   0.480116  1.000000"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Answer\n",
    "\n",
    "#correlation matrix of height, shoe_size, and handspan\n",
    "body_data[['height','shoe_size','handspan']].corr()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1fd218bd",
   "metadata": {},
   "source": [
    "### Problem 7: (3 points)\n",
    "\n",
    "<span  style=\"color:purple; font-size:16px\">The survey, when asking information about the respondent's `sex`, allowed for people to respond: *Male*, *Female*, or *Prefer not to say*. How many observations were there for each level of `sex`?</span>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "669702d5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of observations for each level of sex:\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Male                 70\n",
       "Female               27\n",
       "Prefer not to say     1\n",
       "Name: sex, dtype: int64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Answer\n",
    "# Number of observations for each level of sex\n",
    "print('Number of observations for each level of sex:')\n",
    "body_data['sex'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "69cd24f5",
   "metadata": {},
   "source": [
    "### Problem 8: (3 points)\n",
    "\n",
    "<span  style=\"color:purple; font-size:16px\">Because there are very few who `prefer not to say`, permanently remove them from the data using the `drop(index = XXXX)` method. Take appropriate steps to verify that these observations have been removed.</span>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "8efe1a2e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Answer\n",
    "filt_sex = (body_data['sex'] == 'Prefer not to say')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "831ed4bf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Int64Index([28], dtype='int64')"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "body_data.loc[filt_sex].index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "072ae1cc",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Remove them from the data using the drop(index = XXXX)\n",
    "body_data = body_data.drop(index = 28)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a5843824",
   "metadata": {},
   "source": [
    "To verify that 'Prefer not to say' observations have been removed"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "abf2cb1d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Male      70\n",
       "Female    27\n",
       "Name: sex, dtype: int64"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "body_data['sex'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "d22780ad",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Int64Index([], dtype='int64')"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "body_data.loc[filt_sex].index"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1dc23530",
   "metadata": {},
   "source": [
    "### Problem 9: (5 points)\n",
    "\n",
    "<span  style=\"color:purple; font-size:16px\">Create a DataFrame called `avg_heights` containing 3 columns, 1.) the average `height` (by `sex` and `shoe_size`), 2.)`sex`, and 3.) `shoe_size`. Print out the DataFrame. (Hint: use `groupby()` and deal with the index appropriately.)</span>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "a629b9b1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Answer\n",
    "#Using group by to find average height by sex and shoe size\n",
    "avg_heights=body_data.groupby(['sex', 'shoe_size']).height.mean().to_frame().reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "ca1e1826",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>The average height</th>\n",
       "      <th>sex</th>\n",
       "      <th>shoe_size</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>62.000000</td>\n",
       "      <td>Female</td>\n",
       "      <td>5.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>64.000000</td>\n",
       "      <td>Female</td>\n",
       "      <td>6.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>62.000000</td>\n",
       "      <td>Female</td>\n",
       "      <td>6.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>65.250000</td>\n",
       "      <td>Female</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>61.750000</td>\n",
       "      <td>Female</td>\n",
       "      <td>7.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>64.666667</td>\n",
       "      <td>Female</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>67.125000</td>\n",
       "      <td>Female</td>\n",
       "      <td>8.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>67.600000</td>\n",
       "      <td>Female</td>\n",
       "      <td>9.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>64.000000</td>\n",
       "      <td>Female</td>\n",
       "      <td>9.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>67.500000</td>\n",
       "      <td>Female</td>\n",
       "      <td>10.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>67.000000</td>\n",
       "      <td>Male</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>66.200000</td>\n",
       "      <td>Male</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>67.333333</td>\n",
       "      <td>Male</td>\n",
       "      <td>8.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>68.977273</td>\n",
       "      <td>Male</td>\n",
       "      <td>9.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>68.571429</td>\n",
       "      <td>Male</td>\n",
       "      <td>9.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>70.200000</td>\n",
       "      <td>Male</td>\n",
       "      <td>10.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>70.928571</td>\n",
       "      <td>Male</td>\n",
       "      <td>10.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>71.000000</td>\n",
       "      <td>Male</td>\n",
       "      <td>11.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>69.000000</td>\n",
       "      <td>Male</td>\n",
       "      <td>11.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>72.428571</td>\n",
       "      <td>Male</td>\n",
       "      <td>12.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>72.500000</td>\n",
       "      <td>Male</td>\n",
       "      <td>12.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>72.500000</td>\n",
       "      <td>Male</td>\n",
       "      <td>13.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>78.000000</td>\n",
       "      <td>Male</td>\n",
       "      <td>15.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    The average height     sex  shoe_size\n",
       "0            62.000000  Female        5.5\n",
       "1            64.000000  Female        6.0\n",
       "2            62.000000  Female        6.5\n",
       "3            65.250000  Female        7.0\n",
       "4            61.750000  Female        7.5\n",
       "5            64.666667  Female        8.0\n",
       "6            67.125000  Female        8.5\n",
       "7            67.600000  Female        9.0\n",
       "8            64.000000  Female        9.5\n",
       "9            67.500000  Female       10.0\n",
       "10           67.000000    Male        7.0\n",
       "11           66.200000    Male        8.0\n",
       "12           67.333333    Male        8.5\n",
       "13           68.977273    Male        9.0\n",
       "14           68.571429    Male        9.5\n",
       "15           70.200000    Male       10.0\n",
       "16           70.928571    Male       10.5\n",
       "17           71.000000    Male       11.0\n",
       "18           69.000000    Male       11.5\n",
       "19           72.428571    Male       12.0\n",
       "20           72.500000    Male       12.5\n",
       "21           72.500000    Male       13.0\n",
       "22           78.000000    Male       15.0"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# DataFrame called avg_heights containing 3 columns, 1.) the average height (by sex and shoe_size), 2.)sex, and 3.) shoe_size\n",
    "avg_heights = avg_heights[['height','sex','shoe_size']]\n",
    "avg_heights.rename(columns={'height': 'The average height'})  #Renaming height column"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f12f3620",
   "metadata": {},
   "source": [
    "### Problem 10: (3 points)\n",
    "\n",
    "<span  style=\"color:purple; font-size:16px\">Create a plot using Seaborn's `pairplot()` on the `avg_heights` data, setting the `hue = sex`. Describe what you see.</span>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "a8d402a9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.PairGrid at 0x7fcbd7666e20>"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432.125x360 with 6 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Answer\n",
    "\n",
    "# pairplot with hue sex\n",
    "sns.pairplot(avg_heights, hue ='sex')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b066a4df",
   "metadata": {},
   "source": [
    "#### Written Answer\n",
    "\n",
    "From the above pairplot, It is clear that \n",
    "Height and the shoe size are positive strongly linear relationship. Because, As height increased, shoe size also increases.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8c5b7ce3",
   "metadata": {},
   "source": [
    "### Problem 11: (4 points)\n",
    "\n",
    "<span  style=\"color:purple; font-size:16px\">Use the plot to determine a reasonable rule for defining a cutoff for `height` and `shoe_size` that might be useful in determining if an individual is male or female. Can your rules perfectly predict `sex` based on `height` and `shoe_size`? (Example: If `height` is less than XXX and `shoe_size is less than XXX then I would predict the individual to be XXX. Answers may vary.)</span>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d98be1ac",
   "metadata": {},
   "source": [
    "#### Written Answer\n",
    "\n",
    "From the above pair plot,\n",
    "\n",
    "- cutoff for height is 67\n",
    "- cutoff for shoe size is 10\n",
    "\n",
    "#### predict sex based on height and shoe_size\n",
    "If height is less than 67 and shoe size is less than 10 its Female. \n",
    "If height is greater than 67 and the shoe size is greater than 10 its Male."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b8bf6da2",
   "metadata": {},
   "source": [
    "### Problem 12: (3 points)\n",
    "\n",
    "<span  style=\"color:purple; font-size:16px\">Use `pivot_table()` with the `body_data` to create a DataFrame with `shoe_size` as the index, `sex` as the columns, and the `height` as the values with `mean` as the aggregation function.</span>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "15cd909a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>sex</th>\n",
       "      <th>Female</th>\n",
       "      <th>Male</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>shoe_size</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5.5</th>\n",
       "      <td>62.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6.0</th>\n",
       "      <td>64.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6.5</th>\n",
       "      <td>62.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7.0</th>\n",
       "      <td>65.2</td>\n",
       "      <td>67.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7.5</th>\n",
       "      <td>61.8</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8.0</th>\n",
       "      <td>64.7</td>\n",
       "      <td>66.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8.5</th>\n",
       "      <td>67.1</td>\n",
       "      <td>67.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9.0</th>\n",
       "      <td>67.6</td>\n",
       "      <td>69.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9.5</th>\n",
       "      <td>64.0</td>\n",
       "      <td>68.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10.0</th>\n",
       "      <td>67.5</td>\n",
       "      <td>70.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10.5</th>\n",
       "      <td>NaN</td>\n",
       "      <td>70.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11.0</th>\n",
       "      <td>NaN</td>\n",
       "      <td>71.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11.5</th>\n",
       "      <td>NaN</td>\n",
       "      <td>69.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12.0</th>\n",
       "      <td>NaN</td>\n",
       "      <td>72.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12.5</th>\n",
       "      <td>NaN</td>\n",
       "      <td>72.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13.0</th>\n",
       "      <td>NaN</td>\n",
       "      <td>72.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15.0</th>\n",
       "      <td>NaN</td>\n",
       "      <td>78.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "sex        Female  Male\n",
       "shoe_size              \n",
       "5.5          62.0   NaN\n",
       "6.0          64.0   NaN\n",
       "6.5          62.0   NaN\n",
       "7.0          65.2  67.0\n",
       "7.5          61.8   NaN\n",
       "8.0          64.7  66.2\n",
       "8.5          67.1  67.3\n",
       "9.0          67.6  69.0\n",
       "9.5          64.0  68.6\n",
       "10.0         67.5  70.2\n",
       "10.5          NaN  70.9\n",
       "11.0          NaN  71.0\n",
       "11.5          NaN  69.0\n",
       "12.0          NaN  72.4\n",
       "12.5          NaN  72.5\n",
       "13.0          NaN  72.5\n",
       "15.0          NaN  78.0"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Answer\n",
    "body_data.pivot_table(index = 'shoe_size',\n",
    "                  columns= 'sex',\n",
    "                  values='height',\n",
    "                  aggfunc='mean'\n",
    "                  ).round(1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "472e99a1",
   "metadata": {},
   "source": [
    "### Problem 13: (3 points)\n",
    "\n",
    "<span  style=\"color:purple; font-size:16px\">Determine if there are missing values in the data. If so, in what columns? How many missing values are there?</span>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "7da6abd3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>timestamp</th>\n",
       "      <th>sex</th>\n",
       "      <th>handspan</th>\n",
       "      <th>height</th>\n",
       "      <th>shoe_size</th>\n",
       "      <th>hair_color</th>\n",
       "      <th>mother_height</th>\n",
       "      <th>mother_shoe_size</th>\n",
       "      <th>mother_hair_color</th>\n",
       "      <th>father_height</th>\n",
       "      <th>father_shoe_size</th>\n",
       "      <th>father_hair_color</th>\n",
       "      <th>athlete</th>\n",
       "      <th>shoulder_width</th>\n",
       "      <th>skull_circum</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   timestamp    sex  handspan  height  shoe_size  hair_color  mother_height  \\\n",
       "0      False  False     False    True      False       False          False   \n",
       "1      False  False     False   False      False       False          False   \n",
       "2      False  False     False   False      False       False          False   \n",
       "3      False  False     False   False      False       False          False   \n",
       "4      False   True     False   False      False       False           True   \n",
       "\n",
       "   mother_shoe_size  mother_hair_color  father_height  father_shoe_size  \\\n",
       "0             False              False          False             False   \n",
       "1             False              False          False             False   \n",
       "2             False              False          False             False   \n",
       "3              True              False          False             False   \n",
       "4             False              False           True             False   \n",
       "\n",
       "   father_hair_color  athlete  shoulder_width  skull_circum  \n",
       "0              False    False           False         False  \n",
       "1              False    False           False         False  \n",
       "2              False    False           False         False  \n",
       "3              False    False           False         False  \n",
       "4              False    False           False         False  "
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Answer\n",
    "# Missing Values in data\n",
    "nan_filter = body_data.isnull()\n",
    "nan_filter[:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "2dda29e0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Below are number of missing values in each column:\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "timestamp             0\n",
       "sex                   4\n",
       "handspan              6\n",
       "height                3\n",
       "shoe_size             0\n",
       "hair_color            0\n",
       "mother_height        22\n",
       "mother_shoe_size     38\n",
       "mother_hair_color     0\n",
       "father_height        18\n",
       "father_shoe_size     31\n",
       "father_hair_color     0\n",
       "athlete               0\n",
       "shoulder_width        0\n",
       "skull_circum          0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print('Below are number of missing values in each column:')\n",
    "nan_filter.sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f2226f6d",
   "metadata": {},
   "source": [
    "### Problem 14: (3 points)\n",
    "\n",
    "<span  style=\"color:purple; font-size:16px\">Determine how many non-missing values are in each column of `body_data`.</span>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "015bdbb7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>timestamp</th>\n",
       "      <th>sex</th>\n",
       "      <th>handspan</th>\n",
       "      <th>height</th>\n",
       "      <th>shoe_size</th>\n",
       "      <th>hair_color</th>\n",
       "      <th>mother_height</th>\n",
       "      <th>mother_shoe_size</th>\n",
       "      <th>mother_hair_color</th>\n",
       "      <th>father_height</th>\n",
       "      <th>father_shoe_size</th>\n",
       "      <th>father_hair_color</th>\n",
       "      <th>athlete</th>\n",
       "      <th>shoulder_width</th>\n",
       "      <th>skull_circum</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   timestamp    sex  handspan  height  shoe_size  hair_color  mother_height  \\\n",
       "0       True   True      True   False       True        True           True   \n",
       "1       True   True      True    True       True        True           True   \n",
       "2       True   True      True    True       True        True           True   \n",
       "3       True   True      True    True       True        True           True   \n",
       "4       True  False      True    True       True        True          False   \n",
       "\n",
       "   mother_shoe_size  mother_hair_color  father_height  father_shoe_size  \\\n",
       "0              True               True           True              True   \n",
       "1              True               True           True              True   \n",
       "2              True               True           True              True   \n",
       "3             False               True           True              True   \n",
       "4              True               True          False              True   \n",
       "\n",
       "   father_hair_color  athlete  shoulder_width  skull_circum  \n",
       "0               True     True            True          True  \n",
       "1               True     True            True          True  \n",
       "2               True     True            True          True  \n",
       "3               True     True            True          True  \n",
       "4               True     True            True          True  "
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Answer\n",
    "# Non Missing Values in data\n",
    "notnull_filter = body_data.notnull()\n",
    "notnull_filter[:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "7754971c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Below are number of non-missing values in each column:\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "timestamp            101\n",
       "sex                   97\n",
       "handspan              95\n",
       "height                98\n",
       "shoe_size            101\n",
       "hair_color           101\n",
       "mother_height         79\n",
       "mother_shoe_size      63\n",
       "mother_hair_color    101\n",
       "father_height         83\n",
       "father_shoe_size      70\n",
       "father_hair_color    101\n",
       "athlete              101\n",
       "shoulder_width       101\n",
       "skull_circum         101\n",
       "dtype: int64"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print('Below are number of non-missing values in each column:')\n",
    "notnull_filter.sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6b0404f6",
   "metadata": {},
   "source": [
    "### Problem 15: (4 points)\n",
    "\n",
    "<span  style=\"color:purple; font-size:16px\">There appears to be some missing values in the `sex` column. We want to impute values for these missing observations. Using the `height` for each of the individuals, determine the probability that the person was male or female. </span>\n",
    "\n",
    "+ Extract the data corresponding to each of the missing values of `sex`. \n",
    "+ Calculate the proportion of Males and Females taller than or equal to each of heights of the missing observations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "f78cdd4b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Answer - extract data corresponding to missing values of sex\n",
    "missing_values_sex = body_data['sex'].isnull()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "628748cb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total Missing observations in sex:4\n"
     ]
    }
   ],
   "source": [
    "print(f'Total Missing observations in sex:{missing_values_sex.sum()}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "40f61736",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Missing observations in sex:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>timestamp</th>\n",
       "      <th>sex</th>\n",
       "      <th>handspan</th>\n",
       "      <th>height</th>\n",
       "      <th>shoe_size</th>\n",
       "      <th>hair_color</th>\n",
       "      <th>mother_height</th>\n",
       "      <th>mother_shoe_size</th>\n",
       "      <th>mother_hair_color</th>\n",
       "      <th>father_height</th>\n",
       "      <th>father_shoe_size</th>\n",
       "      <th>father_hair_color</th>\n",
       "      <th>athlete</th>\n",
       "      <th>shoulder_width</th>\n",
       "      <th>skull_circum</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>9/20/2018 20:31:44</td>\n",
       "      <td>NaN</td>\n",
       "      <td>10.0</td>\n",
       "      <td>71.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>Black</td>\n",
       "      <td>NaN</td>\n",
       "      <td>9.0</td>\n",
       "      <td>Black</td>\n",
       "      <td>NaN</td>\n",
       "      <td>11.0</td>\n",
       "      <td>Black</td>\n",
       "      <td>No</td>\n",
       "      <td>19.0</td>\n",
       "      <td>22.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>9/20/2018 21:37:02</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>Brown</td>\n",
       "      <td>62.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>Black</td>\n",
       "      <td>67.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>Black</td>\n",
       "      <td>Yes</td>\n",
       "      <td>16.0</td>\n",
       "      <td>24.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>9/21/2018 9:16:41</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8.0</td>\n",
       "      <td>74.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>Brown</td>\n",
       "      <td>66.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Brown</td>\n",
       "      <td>76.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>Black</td>\n",
       "      <td>Yes</td>\n",
       "      <td>20.0</td>\n",
       "      <td>24.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>73</th>\n",
       "      <td>9/23/2018 13:14:13</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7.0</td>\n",
       "      <td>61.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>Black</td>\n",
       "      <td>62.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>Black</td>\n",
       "      <td>67.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Black</td>\n",
       "      <td>No</td>\n",
       "      <td>16.0</td>\n",
       "      <td>21.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             timestamp  sex  handspan  height  shoe_size hair_color  \\\n",
       "4   9/20/2018 20:31:44  NaN      10.0    71.0       11.0      Black   \n",
       "10  9/20/2018 21:37:02  NaN       7.0    64.0        6.0      Brown   \n",
       "18   9/21/2018 9:16:41  NaN       8.0    74.0       13.0      Brown   \n",
       "73  9/23/2018 13:14:13  NaN       7.0    61.0        5.0      Black   \n",
       "\n",
       "    mother_height  mother_shoe_size mother_hair_color  father_height  \\\n",
       "4             NaN               9.0             Black            NaN   \n",
       "10           62.0               6.0             Black           67.0   \n",
       "18           66.0               NaN             Brown           76.0   \n",
       "73           62.0               5.0             Black           67.0   \n",
       "\n",
       "    father_shoe_size father_hair_color athlete  shoulder_width  skull_circum  \n",
       "4               11.0             Black      No            19.0          22.0  \n",
       "10              10.0             Black     Yes            16.0          24.0  \n",
       "18              13.0             Black     Yes            20.0          24.0  \n",
       "73               NaN             Black      No            16.0          21.0  "
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print('Missing observations in sex:')\n",
    "body_data[missing_values_sex]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7c1008e4",
   "metadata": {},
   "source": [
    "Determine proportion of Males and Females with heights above ___."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "dd85ec5e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Determine proportion of Females 71 inches or taller\n",
    "Females_71_or_abv = (body_data['sex'] == 'Female') & (body_data['height'] >= 71)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b41dc368",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "e7956eb4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "101"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "totaldata =len(body_data) #Total Observations\n",
    "totaldata"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "f5b15a27",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Num_fem_71_abv= len(body_data[Females_71_or_abv])\n",
    "Num_fem_71_abv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "02bcbf4e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "proportion of Females 71 inches or taller: 0.009900990099009901\n"
     ]
    }
   ],
   "source": [
    "print('proportion of Females 71 inches or taller:',((Num_fem_71_abv)/(totaldata)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "1f9fc4c7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Determine proportion of Males 71 inches or taller\n",
    "Males_71_or_abv = (body_data['sex'] == 'Male') & (body_data['height'] >= 71)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "b35c3cf4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "23"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Num_male_71_abv = len(body_data[Males_71_or_abv])\n",
    "Num_male_71_abv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "78e6020a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "proportion of Males 71 inches or taller: 0.22772277227722773\n"
     ]
    }
   ],
   "source": [
    "print('proportion of Males 71 inches or taller:',((Num_male_71_abv)/(totaldata)))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f8be18cb",
   "metadata": {},
   "source": [
    "Determine proportion of Males and Females with heights below ___."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "f55d7bdf",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Determine proportion of Females 64 inches or smaller\n",
    "Females_64_or_blw = (body_data['sex'] == 'Female') & (body_data['height'] <= 64)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "f74e78bc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "11"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Num_fem_64_blw = len(body_data[Females_64_or_blw])\n",
    "Num_fem_64_blw"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "8a995e8e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "proportion of Females 64 inches or smaller: 0.10891089108910891\n"
     ]
    }
   ],
   "source": [
    "print('proportion of Females 64 inches or smaller:',((Num_fem_64_blw)/(totaldata)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "3fdd1ec5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Determine proportion of Males 64 inches or smaller\n",
    "Males_64_or_blw = (body_data['sex'] == 'Male') & (body_data['height'] <= 64)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "7a4c26e9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Num_male_64_blw=len(body_data[Males_64_or_blw])\n",
    "Num_male_64_blw"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "a8011ab6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "proportion of Males 64 inches or smaller: 0.009900990099009901\n"
     ]
    }
   ],
   "source": [
    "print('proportion of Males 64 inches or smaller:',((Num_male_64_blw)/(totaldata)))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "97030279",
   "metadata": {},
   "source": [
    "Hence,\n",
    "\n",
    "- proportion of Females 71 inches or taller: 0.009900990099009901\n",
    "- proportion of Males 71 inches or taller: 0.22772277227722773\n",
    "- proportion of Females 64 inches or smaller: 0.10891089108910891\n",
    "- proportion of Males 64 inches or smaller: 0.009900990099009901\n",
    "\n",
    "\n",
    "From the above proportion, we can say that,\n",
    "- The missing observation with 71.0 height could be 'Male'\n",
    "- The missing observation with 64.0 height could be 'Female'\n",
    "- The missing observation with 74.0 height could be 'Male'\n",
    "- The missing observation with 61.0 height could be 'Female'"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5884f305",
   "metadata": {},
   "source": [
    "### Problem 16: (3 points)\n",
    "\n",
    "<span  style=\"color:purple; font-size:16px\">Convert the `timestamp` variable to a `datetime` object. Sort the data by index. Print out any relevant output that can verify that the timestamp was converted to datetime type. </span>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "33e5c921",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Answer\n",
    "# Converting the timestamp variable to a datetime object.\n",
    "body_data['timestamp']= pd.to_datetime(body_data['timestamp'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b728558d",
   "metadata": {},
   "source": [
    "To check timestamp is converted to datetime type"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "5d029fd2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0   2018-09-20 12:21:27\n",
       "1   2018-09-20 18:43:07\n",
       "2   2018-09-20 18:53:27\n",
       "3   2018-09-20 20:13:04\n",
       "4   2018-09-20 20:31:44\n",
       "Name: timestamp, dtype: datetime64[ns]"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "body_data['timestamp'][:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "9166b7ff",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 101 entries, 0 to 101\n",
      "Data columns (total 15 columns):\n",
      " #   Column             Non-Null Count  Dtype         \n",
      "---  ------             --------------  -----         \n",
      " 0   timestamp          101 non-null    datetime64[ns]\n",
      " 1   sex                97 non-null     object        \n",
      " 2   handspan           95 non-null     float64       \n",
      " 3   height             98 non-null     float64       \n",
      " 4   shoe_size          101 non-null    float64       \n",
      " 5   hair_color         101 non-null    object        \n",
      " 6   mother_height      79 non-null     float64       \n",
      " 7   mother_shoe_size   63 non-null     float64       \n",
      " 8   mother_hair_color  101 non-null    object        \n",
      " 9   father_height      83 non-null     float64       \n",
      " 10  father_shoe_size   70 non-null     float64       \n",
      " 11  father_hair_color  101 non-null    object        \n",
      " 12  athlete            101 non-null    object        \n",
      " 13  shoulder_width     101 non-null    float64       \n",
      " 14  skull_circum       101 non-null    float64       \n",
      "dtypes: datetime64[ns](1), float64(9), object(5)\n",
      "memory usage: 12.6+ KB\n"
     ]
    }
   ],
   "source": [
    "body_data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "4871f132",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>timestamp</th>\n",
       "      <th>sex</th>\n",
       "      <th>handspan</th>\n",
       "      <th>height</th>\n",
       "      <th>shoe_size</th>\n",
       "      <th>hair_color</th>\n",
       "      <th>mother_height</th>\n",
       "      <th>mother_shoe_size</th>\n",
       "      <th>mother_hair_color</th>\n",
       "      <th>father_height</th>\n",
       "      <th>father_shoe_size</th>\n",
       "      <th>father_hair_color</th>\n",
       "      <th>athlete</th>\n",
       "      <th>shoulder_width</th>\n",
       "      <th>skull_circum</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2018-09-20 12:21:27</td>\n",
       "      <td>Male</td>\n",
       "      <td>7.75</td>\n",
       "      <td>NaN</td>\n",
       "      <td>9.5</td>\n",
       "      <td>Black</td>\n",
       "      <td>63.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>Brown</td>\n",
       "      <td>69.0</td>\n",
       "      <td>10.5</td>\n",
       "      <td>Black</td>\n",
       "      <td>No</td>\n",
       "      <td>18.0</td>\n",
       "      <td>22.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2018-09-20 18:43:07</td>\n",
       "      <td>Male</td>\n",
       "      <td>8.50</td>\n",
       "      <td>67.0</td>\n",
       "      <td>8.5</td>\n",
       "      <td>Blonde</td>\n",
       "      <td>62.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>Brown</td>\n",
       "      <td>74.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>Blonde</td>\n",
       "      <td>Yes</td>\n",
       "      <td>16.0</td>\n",
       "      <td>24.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            timestamp   sex  handspan  height  shoe_size hair_color  \\\n",
       "0 2018-09-20 12:21:27  Male      7.75     NaN        9.5      Black   \n",
       "1 2018-09-20 18:43:07  Male      8.50    67.0        8.5     Blonde   \n",
       "\n",
       "   mother_height  mother_shoe_size mother_hair_color  father_height  \\\n",
       "0           63.0               7.0             Brown           69.0   \n",
       "1           62.0               6.0             Brown           74.0   \n",
       "\n",
       "   father_shoe_size father_hair_color athlete  shoulder_width  skull_circum  \n",
       "0              10.5             Black      No            18.0         22.25  \n",
       "1              11.0            Blonde     Yes            16.0         24.00  "
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# sort data by index\n",
    "body_data.sort_index().head(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cc0b1f8b",
   "metadata": {},
   "source": [
    "### Problem 17: (3 points)\n",
    "\n",
    "<span  style=\"color:purple; font-size:16px\">Plot a time-series plot of the responses by `timestamp` by calling the `plot()` method on the `timestamp` column extracted as a Series. Provide a suitable title and make the plot large. Interpret what you are seeing in the plot. How do you explain the stair-step shape? (Hint: The index will be displayed on the x-axis and the timestamp on the y-axis)</span>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "eb2a6280",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:title={'center':'Responses by Timestamp from 21st Sep to 25th Sep 2018'}, xlabel='Index', ylabel='Timestamp'>"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Answer\n",
    "# Time-series plot of the responses by timestamp\n",
    "%matplotlib inline\n",
    "body_data['timestamp'].plot(figsize=(15,10),\n",
    "                                      rot=45,\n",
    "                                      marker = '.',\n",
    "                                      alpha=0.4,\n",
    "                                      title = 'Responses by Timestamp from 21st Sep to 25th Sep 2018',\n",
    "                                      xlabel= 'Index',\n",
    "                                      ylabel= 'Timestamp',\n",
    "                                      )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ecc28364",
   "metadata": {},
   "source": [
    "#### Written Answer\n",
    "\n",
    "\n",
    "From the above stair step shape of the plot we can say that, Responses increased gradually from 21 Sep 2018 to 25 Sep 2018 in regular intervals"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fdd2616c",
   "metadata": {},
   "source": [
    "### Problem 18: (3 points)\n",
    "\n",
    "<span  style=\"color:purple; font-size:16px\">Determine the days of the week of the responses as recorded by the `timestamp` and save these values as a new column in the data called `DOW`.</span>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "9fadff3e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>timestamp</th>\n",
       "      <th>sex</th>\n",
       "      <th>handspan</th>\n",
       "      <th>height</th>\n",
       "      <th>shoe_size</th>\n",
       "      <th>hair_color</th>\n",
       "      <th>mother_height</th>\n",
       "      <th>mother_shoe_size</th>\n",
       "      <th>mother_hair_color</th>\n",
       "      <th>father_height</th>\n",
       "      <th>father_shoe_size</th>\n",
       "      <th>father_hair_color</th>\n",
       "      <th>athlete</th>\n",
       "      <th>shoulder_width</th>\n",
       "      <th>skull_circum</th>\n",
       "      <th>DOW</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>2018-09-21 07:53:51</td>\n",
       "      <td>Female</td>\n",
       "      <td>7.0</td>\n",
       "      <td>67.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>Blonde</td>\n",
       "      <td>62.0</td>\n",
       "      <td>7.5</td>\n",
       "      <td>Brown</td>\n",
       "      <td>74.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>Brown</td>\n",
       "      <td>No</td>\n",
       "      <td>14.50</td>\n",
       "      <td>21.000</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>87</th>\n",
       "      <td>2018-09-24 07:03:24</td>\n",
       "      <td>Male</td>\n",
       "      <td>8.5</td>\n",
       "      <td>70.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>Black</td>\n",
       "      <td>64.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>Brown</td>\n",
       "      <td>71.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>Black</td>\n",
       "      <td>Yes</td>\n",
       "      <td>3.14</td>\n",
       "      <td>1.618</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>2018-09-21 10:24:20</td>\n",
       "      <td>Male</td>\n",
       "      <td>7.0</td>\n",
       "      <td>73.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>Black</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Black</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Black</td>\n",
       "      <td>No</td>\n",
       "      <td>17.00</td>\n",
       "      <td>29.530</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>71</th>\n",
       "      <td>2018-09-23 10:03:03</td>\n",
       "      <td>Female</td>\n",
       "      <td>8.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>Brown</td>\n",
       "      <td>63.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>Brown</td>\n",
       "      <td>72.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>Brown</td>\n",
       "      <td>Yes</td>\n",
       "      <td>16.50</td>\n",
       "      <td>22.500</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>2018-09-21 12:36:18</td>\n",
       "      <td>Male</td>\n",
       "      <td>9.5</td>\n",
       "      <td>68.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>Black</td>\n",
       "      <td>61.0</td>\n",
       "      <td>5.5</td>\n",
       "      <td>Black</td>\n",
       "      <td>72.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>Black</td>\n",
       "      <td>Yes</td>\n",
       "      <td>20.00</td>\n",
       "      <td>21.000</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             timestamp     sex  handspan  height  shoe_size hair_color  \\\n",
       "17 2018-09-21 07:53:51  Female       7.0    67.0        9.0     Blonde   \n",
       "87 2018-09-24 07:03:24    Male       8.5    70.0       10.0      Black   \n",
       "21 2018-09-21 10:24:20    Male       7.0    73.0       12.0      Black   \n",
       "71 2018-09-23 10:03:03  Female       8.0    64.0        8.0      Brown   \n",
       "30 2018-09-21 12:36:18    Male       9.5    68.0       11.0      Black   \n",
       "\n",
       "    mother_height  mother_shoe_size mother_hair_color  father_height  \\\n",
       "17           62.0               7.5             Brown           74.0   \n",
       "87           64.0               7.0             Brown           71.0   \n",
       "21            NaN               NaN             Black            NaN   \n",
       "71           63.0               8.0             Brown           72.0   \n",
       "30           61.0               5.5             Black           72.0   \n",
       "\n",
       "    father_shoe_size father_hair_color athlete  shoulder_width  skull_circum  \\\n",
       "17              12.0             Brown      No           14.50        21.000   \n",
       "87              10.0             Black     Yes            3.14         1.618   \n",
       "21               NaN             Black      No           17.00        29.530   \n",
       "71              12.0             Brown     Yes           16.50        22.500   \n",
       "30              12.0             Black     Yes           20.00        21.000   \n",
       "\n",
       "    DOW  \n",
       "17    4  \n",
       "87    0  \n",
       "21    4  \n",
       "71    6  \n",
       "30    4  "
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Answer\n",
    "\n",
    "#Creating the New column DOW with days of the week\n",
    "body_data['DOW'] = body_data['timestamp'].dt.dayofweek\n",
    "body_data.sample(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7c9f57df",
   "metadata": {},
   "source": [
    "### Problem 19: (3 points)\n",
    "\n",
    "<span  style=\"color:purple; font-size:16px\">Create a visualization showing the number of survey submissions by the day of the week. What day had the most submissions? The least number of submissions?</span>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "1b2c22e7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:title={'center':'Number of survey submissions by the day of the week'}, xlabel='Day of the Week', ylabel='Number of Submissions'>"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Answer\n",
    "body_data['DOW'].value_counts().plot(kind='bar', figsize=(15,10),\n",
    "                                      rot=45,\n",
    "                                      legend = True,\n",
    "                                      title = 'Number of survey submissions by the day of the week',\n",
    "                                      xlabel= 'Day of the Week',\n",
    "                                      ylabel = 'Number of Submissions'\n",
    "                                      )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3130b27b",
   "metadata": {},
   "source": [
    "Since .dayofweek extract the day of the week as a number (Mon = 0, Tues = 1, Wed = 2, Thurs = 3, Fri = 4, Sat = 5, Sun = 6)\n",
    "\n",
    "Hence,\n",
    "- Friday has the most submissions\n",
    "- Wednesday has the least number of submissions (0 Submissions)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b11e0c33",
   "metadata": {},
   "source": [
    "### Problem 20: (3 points)\n",
    "\n",
    "<span  style=\"color:purple; font-size:16px\">On what day of the week was the first response submitted? The last response?</span>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "175135ae",
   "metadata": {},
   "outputs": [],
   "source": [
    "body_data.set_index('timestamp',inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "2e205b77",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "timestamp\n",
       "2018-09-20 12:21:27    3\n",
       "2018-09-20 18:43:07    3\n",
       "2018-09-20 18:53:27    3\n",
       "2018-09-20 20:13:04    3\n",
       "2018-09-20 20:31:44    3\n",
       "                      ..\n",
       "2018-09-24 19:20:02    0\n",
       "2018-09-24 23:13:21    0\n",
       "2018-09-25 09:22:20    1\n",
       "2018-09-25 10:51:25    1\n",
       "2018-09-25 12:54:21    1\n",
       "Name: DOW, Length: 101, dtype: int64"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Res_by_day_sorted = body_data['DOW'].sort_index(ascending=True)\n",
    "Res_by_day_sorted"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "986dee08",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The First response submitted on the day :timestamp\n",
      "2018-09-20 12:21:27    3\n",
      "Name: DOW, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# Answer\n",
    "# First response\n",
    "print(f'The First response submitted on the day :{Res_by_day_sorted.head(1)}' )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1da05a81",
   "metadata": {},
   "source": [
    "- The First response submitted on Thursday"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "5dc71423",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The First response submitted on the day :timestamp\n",
      "2018-09-25 12:54:21    1\n",
      "Name: DOW, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# Answer\n",
    "# Last response\n",
    "print(f'The First response submitted on the day :{Res_by_day_sorted.tail(1)}' )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "85eff8f1",
   "metadata": {},
   "source": [
    "- The Last response submitted on Tuesday"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eb99b0f3",
   "metadata": {},
   "source": [
    "### Problem 21: (3 points)\n",
    "\n",
    "<span  style=\"color:purple; font-size:16px\">Use the time index to extract all survey submissions on Sept 25. How many submissions were made on that day?</span>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "76146507",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sex</th>\n",
       "      <th>handspan</th>\n",
       "      <th>height</th>\n",
       "      <th>shoe_size</th>\n",
       "      <th>hair_color</th>\n",
       "      <th>mother_height</th>\n",
       "      <th>mother_shoe_size</th>\n",
       "      <th>mother_hair_color</th>\n",
       "      <th>father_height</th>\n",
       "      <th>father_shoe_size</th>\n",
       "      <th>father_hair_color</th>\n",
       "      <th>athlete</th>\n",
       "      <th>shoulder_width</th>\n",
       "      <th>skull_circum</th>\n",
       "      <th>DOW</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>timestamp</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2018-09-25 09:22:20</th>\n",
       "      <td>Male</td>\n",
       "      <td>8.8</td>\n",
       "      <td>73.5</td>\n",
       "      <td>11.0</td>\n",
       "      <td>Black</td>\n",
       "      <td>65.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>Black</td>\n",
       "      <td>70.0</td>\n",
       "      <td>10.5</td>\n",
       "      <td>Black</td>\n",
       "      <td>Yes</td>\n",
       "      <td>19.7</td>\n",
       "      <td>23.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-25 10:51:25</th>\n",
       "      <td>Male</td>\n",
       "      <td>8.2</td>\n",
       "      <td>65.0</td>\n",
       "      <td>8.5</td>\n",
       "      <td>Black</td>\n",
       "      <td>61.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>Black</td>\n",
       "      <td>67.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>Black</td>\n",
       "      <td>No</td>\n",
       "      <td>17.5</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-25 12:54:21</th>\n",
       "      <td>Male</td>\n",
       "      <td>8.5</td>\n",
       "      <td>73.5</td>\n",
       "      <td>11.0</td>\n",
       "      <td>Black</td>\n",
       "      <td>68.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>Blonde</td>\n",
       "      <td>73.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>Black</td>\n",
       "      <td>No</td>\n",
       "      <td>15.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      sex  handspan  height  shoe_size hair_color  \\\n",
       "timestamp                                                           \n",
       "2018-09-25 09:22:20  Male       8.8    73.5       11.0      Black   \n",
       "2018-09-25 10:51:25  Male       8.2    65.0        8.5      Black   \n",
       "2018-09-25 12:54:21  Male       8.5    73.5       11.0      Black   \n",
       "\n",
       "                     mother_height  mother_shoe_size mother_hair_color  \\\n",
       "timestamp                                                                \n",
       "2018-09-25 09:22:20           65.0               9.0             Black   \n",
       "2018-09-25 10:51:25           61.0               6.0             Black   \n",
       "2018-09-25 12:54:21           68.0              11.0            Blonde   \n",
       "\n",
       "                     father_height  father_shoe_size father_hair_color  \\\n",
       "timestamp                                                                \n",
       "2018-09-25 09:22:20           70.0              10.5             Black   \n",
       "2018-09-25 10:51:25           67.0               8.0             Black   \n",
       "2018-09-25 12:54:21           73.0              12.0             Black   \n",
       "\n",
       "                    athlete  shoulder_width  skull_circum  DOW  \n",
       "timestamp                                                       \n",
       "2018-09-25 09:22:20     Yes            19.7          23.0    1  \n",
       "2018-09-25 10:51:25      No            17.5          22.0    1  \n",
       "2018-09-25 12:54:21      No            15.0          23.0    1  "
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Answer\n",
    "#survey submissions on Sept 25\n",
    "Submissions_Sep_25 = body_data.loc['2018-09-25']\n",
    "Submissions_Sep_25"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "04db83fa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of submissions made on Sept 25: 3\n"
     ]
    }
   ],
   "source": [
    "print(f'Number of submissions made on Sept 25: {len(Submissions_Sep_25)}')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "23512e36",
   "metadata": {},
   "source": [
    "### Problem 22: (3 points)\n",
    "\n",
    "<span  style=\"color:purple; font-size:16px\">Use the time index to extract all survey submissions between 10AM and 2PM on September 21. How many submissions were made during that time?</span>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "2c0ee305",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sex</th>\n",
       "      <th>handspan</th>\n",
       "      <th>height</th>\n",
       "      <th>shoe_size</th>\n",
       "      <th>hair_color</th>\n",
       "      <th>mother_height</th>\n",
       "      <th>mother_shoe_size</th>\n",
       "      <th>mother_hair_color</th>\n",
       "      <th>father_height</th>\n",
       "      <th>father_shoe_size</th>\n",
       "      <th>father_hair_color</th>\n",
       "      <th>athlete</th>\n",
       "      <th>shoulder_width</th>\n",
       "      <th>skull_circum</th>\n",
       "      <th>DOW</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>timestamp</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2018-09-21 10:24:20</th>\n",
       "      <td>Male</td>\n",
       "      <td>7.00</td>\n",
       "      <td>73.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>Black</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Black</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Black</td>\n",
       "      <td>No</td>\n",
       "      <td>17.0</td>\n",
       "      <td>29.530</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-21 10:30:01</th>\n",
       "      <td>Male</td>\n",
       "      <td>9.20</td>\n",
       "      <td>NaN</td>\n",
       "      <td>10.5</td>\n",
       "      <td>Brown</td>\n",
       "      <td>66.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Brown</td>\n",
       "      <td>74.0</td>\n",
       "      <td>12.5</td>\n",
       "      <td>Brown</td>\n",
       "      <td>Yes</td>\n",
       "      <td>21.0</td>\n",
       "      <td>22.500</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-21 10:40:54</th>\n",
       "      <td>Male</td>\n",
       "      <td>8.00</td>\n",
       "      <td>70.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>Blonde</td>\n",
       "      <td>62.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>Blonde</td>\n",
       "      <td>68.0</td>\n",
       "      <td>9.5</td>\n",
       "      <td>Black</td>\n",
       "      <td>Yes</td>\n",
       "      <td>17.0</td>\n",
       "      <td>7.375</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-21 11:24:46</th>\n",
       "      <td>Male</td>\n",
       "      <td>8.50</td>\n",
       "      <td>69.0</td>\n",
       "      <td>8.5</td>\n",
       "      <td>Black</td>\n",
       "      <td>64.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Black</td>\n",
       "      <td>66.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>Black</td>\n",
       "      <td>No</td>\n",
       "      <td>18.0</td>\n",
       "      <td>22.000</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-21 11:49:00</th>\n",
       "      <td>Female</td>\n",
       "      <td>7.25</td>\n",
       "      <td>66.5</td>\n",
       "      <td>7.0</td>\n",
       "      <td>Blonde</td>\n",
       "      <td>66.0</td>\n",
       "      <td>7.5</td>\n",
       "      <td>Blonde</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Brown</td>\n",
       "      <td>Yes</td>\n",
       "      <td>16.5</td>\n",
       "      <td>21.750</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-21 11:58:52</th>\n",
       "      <td>Male</td>\n",
       "      <td>9.00</td>\n",
       "      <td>67.0</td>\n",
       "      <td>11.5</td>\n",
       "      <td>Brown</td>\n",
       "      <td>65.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>Brown</td>\n",
       "      <td>70.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>Brown</td>\n",
       "      <td>Yes</td>\n",
       "      <td>19.0</td>\n",
       "      <td>23.000</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-21 11:59:16</th>\n",
       "      <td>Female</td>\n",
       "      <td>6.50</td>\n",
       "      <td>67.5</td>\n",
       "      <td>7.0</td>\n",
       "      <td>Blonde</td>\n",
       "      <td>66.5</td>\n",
       "      <td>9.5</td>\n",
       "      <td>Blonde</td>\n",
       "      <td>71.0</td>\n",
       "      <td>10.5</td>\n",
       "      <td>Brown</td>\n",
       "      <td>Yes</td>\n",
       "      <td>15.0</td>\n",
       "      <td>21.000</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-21 12:22:11</th>\n",
       "      <td>Male</td>\n",
       "      <td>8.50</td>\n",
       "      <td>72.0</td>\n",
       "      <td>9.5</td>\n",
       "      <td>Blonde</td>\n",
       "      <td>64.0</td>\n",
       "      <td>7.5</td>\n",
       "      <td>Brown</td>\n",
       "      <td>72.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>Blonde</td>\n",
       "      <td>Yes</td>\n",
       "      <td>16.0</td>\n",
       "      <td>23.500</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-21 12:36:18</th>\n",
       "      <td>Male</td>\n",
       "      <td>9.50</td>\n",
       "      <td>68.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>Black</td>\n",
       "      <td>61.0</td>\n",
       "      <td>5.5</td>\n",
       "      <td>Black</td>\n",
       "      <td>72.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>Black</td>\n",
       "      <td>Yes</td>\n",
       "      <td>20.0</td>\n",
       "      <td>21.000</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-21 12:47:05</th>\n",
       "      <td>Female</td>\n",
       "      <td>7.00</td>\n",
       "      <td>64.0</td>\n",
       "      <td>5.5</td>\n",
       "      <td>Brown</td>\n",
       "      <td>67.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>Brown</td>\n",
       "      <td>70.0</td>\n",
       "      <td>10.5</td>\n",
       "      <td>Brown</td>\n",
       "      <td>Yes</td>\n",
       "      <td>15.0</td>\n",
       "      <td>22.000</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-21 13:19:51</th>\n",
       "      <td>Male</td>\n",
       "      <td>8.50</td>\n",
       "      <td>69.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>Blonde</td>\n",
       "      <td>62.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>Brown</td>\n",
       "      <td>65.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>Brown</td>\n",
       "      <td>Yes</td>\n",
       "      <td>18.0</td>\n",
       "      <td>21.500</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-09-21 13:54:15</th>\n",
       "      <td>Male</td>\n",
       "      <td>7.50</td>\n",
       "      <td>67.5</td>\n",
       "      <td>9.0</td>\n",
       "      <td>Black</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Black</td>\n",
       "      <td>68.0</td>\n",
       "      <td>9.5</td>\n",
       "      <td>Black</td>\n",
       "      <td>Yes</td>\n",
       "      <td>20.0</td>\n",
       "      <td>22.500</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                        sex  handspan  height  shoe_size hair_color  \\\n",
       "timestamp                                                             \n",
       "2018-09-21 10:24:20    Male      7.00    73.0       12.0      Black   \n",
       "2018-09-21 10:30:01    Male      9.20     NaN       10.5      Brown   \n",
       "2018-09-21 10:40:54    Male      8.00    70.0       10.0     Blonde   \n",
       "2018-09-21 11:24:46    Male      8.50    69.0        8.5      Black   \n",
       "2018-09-21 11:49:00  Female      7.25    66.5        7.0     Blonde   \n",
       "2018-09-21 11:58:52    Male      9.00    67.0       11.5      Brown   \n",
       "2018-09-21 11:59:16  Female      6.50    67.5        7.0     Blonde   \n",
       "2018-09-21 12:22:11    Male      8.50    72.0        9.5     Blonde   \n",
       "2018-09-21 12:36:18    Male      9.50    68.0       11.0      Black   \n",
       "2018-09-21 12:47:05  Female      7.00    64.0        5.5      Brown   \n",
       "2018-09-21 13:19:51    Male      8.50    69.0       10.0     Blonde   \n",
       "2018-09-21 13:54:15    Male      7.50    67.5        9.0      Black   \n",
       "\n",
       "                     mother_height  mother_shoe_size mother_hair_color  \\\n",
       "timestamp                                                                \n",
       "2018-09-21 10:24:20            NaN               NaN             Black   \n",
       "2018-09-21 10:30:01           66.0               NaN             Brown   \n",
       "2018-09-21 10:40:54           62.0               5.0            Blonde   \n",
       "2018-09-21 11:24:46           64.0               NaN             Black   \n",
       "2018-09-21 11:49:00           66.0               7.5            Blonde   \n",
       "2018-09-21 11:58:52           65.0               9.0             Brown   \n",
       "2018-09-21 11:59:16           66.5               9.5            Blonde   \n",
       "2018-09-21 12:22:11           64.0               7.5             Brown   \n",
       "2018-09-21 12:36:18           61.0               5.5             Black   \n",
       "2018-09-21 12:47:05           67.0               7.0             Brown   \n",
       "2018-09-21 13:19:51           62.0               5.0             Brown   \n",
       "2018-09-21 13:54:15            NaN               NaN             Black   \n",
       "\n",
       "                     father_height  father_shoe_size father_hair_color  \\\n",
       "timestamp                                                                \n",
       "2018-09-21 10:24:20            NaN               NaN             Black   \n",
       "2018-09-21 10:30:01           74.0              12.5             Brown   \n",
       "2018-09-21 10:40:54           68.0               9.5             Black   \n",
       "2018-09-21 11:24:46           66.0               9.0             Black   \n",
       "2018-09-21 11:49:00            NaN               NaN             Brown   \n",
       "2018-09-21 11:58:52           70.0              10.0             Brown   \n",
       "2018-09-21 11:59:16           71.0              10.5             Brown   \n",
       "2018-09-21 12:22:11           72.0              12.0            Blonde   \n",
       "2018-09-21 12:36:18           72.0              12.0             Black   \n",
       "2018-09-21 12:47:05           70.0              10.5             Brown   \n",
       "2018-09-21 13:19:51           65.0               8.0             Brown   \n",
       "2018-09-21 13:54:15           68.0               9.5             Black   \n",
       "\n",
       "                    athlete  shoulder_width  skull_circum  DOW  \n",
       "timestamp                                                       \n",
       "2018-09-21 10:24:20      No            17.0        29.530    4  \n",
       "2018-09-21 10:30:01     Yes            21.0        22.500    4  \n",
       "2018-09-21 10:40:54     Yes            17.0         7.375    4  \n",
       "2018-09-21 11:24:46      No            18.0        22.000    4  \n",
       "2018-09-21 11:49:00     Yes            16.5        21.750    4  \n",
       "2018-09-21 11:58:52     Yes            19.0        23.000    4  \n",
       "2018-09-21 11:59:16     Yes            15.0        21.000    4  \n",
       "2018-09-21 12:22:11     Yes            16.0        23.500    4  \n",
       "2018-09-21 12:36:18     Yes            20.0        21.000    4  \n",
       "2018-09-21 12:47:05     Yes            15.0        22.000    4  \n",
       "2018-09-21 13:19:51     Yes            18.0        21.500    4  \n",
       "2018-09-21 13:54:15     Yes            20.0        22.500    4  "
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Answer\n",
    "Sub_Sep21_10AM_2PM = body_data.loc['2018-09-21 10:00:00':'2018-09-21 14:00:00']\n",
    "Sub_Sep21_10AM_2PM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "5e8e1746",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of submissions made on Sept 21 from 10AM to 2PM: 12\n"
     ]
    }
   ],
   "source": [
    "print(f'Number of submissions made on Sept 21 from 10AM to 2PM: {len(Sub_Sep21_10AM_2PM)}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "5e087e0b",
   "metadata": {},
   "outputs": [],
   "source": [
    "abc= (body_data['sex'] == 'Female') & (body_data['height'] >= 71)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "bfbe67c0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Series([], dtype: int64)"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "abc.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ac519507",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
