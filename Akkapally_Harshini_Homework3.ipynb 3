{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "4f10c40d",
   "metadata": {},
   "source": [
    "## DATA 690 Homework 3 (60 points - Due on Sunday, October 2, 2022 by 11:00 pm ET)\n",
    "\n",
    "The output of this assignment for submission should be in PDF format **AND** .py or .ipynb. The name of the file should be as follows: Lastname_Firstname_Homework3.pdf (example: Thomas_Sunela_Homework3.pdf) **AND** Lastname_Firstname_Homework3.ipynb (example: Thomas_Sunela_Assignment3.ipynb. In short, you are submitting the python notebook as well as the pdf of that notebook. Do **NOT** submit .html file, the system will give you an error.\n",
    "\n",
    "    \n",
    "Incorrect file name will cost you points!<br>\n",
    "\n",
    "Instructions for converting a Jupyter Python notebook to PDF: Go to the menu and choose, File --> Download As --> html. Open that html file and print it to PDF. Submit the PDF file **NOT** the html file.\n",
    "\n",
    "If you are using Google Colab, remember to review the PDF before submitting to ensure that all cells and answers are displayed in the PDF.\n",
    "\n",
    "**Things to note:**\n",
    "\n",
    "* Each cell should display an output\n",
    "* Use only the basic Python concepts and methods\n",
    "* Use both Markdown and code comments in the Jupyter Notebook as needed\n",
    "\n",
    "### IF YOU ARE MAKING ANY ASSUMPTIONS, WRITE THAT IN A MARKDOWN CELL OR COMMENT\n",
    "### $\\color{red}{\\text{Answer the questions asked as well, not just code}}$\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31e22e75",
   "metadata": {},
   "source": [
    "# `tips`\n",
    "\n",
    "Food servers' tips in restaurants may be influenced by many factors, including the nature of the restaurant, size of the party, and table locations in the restaurant. Restaurant managers need to know which factors matter when they assign tables to food servers. For the sake of staff morale, they usually want to avoid either the substance or the appearance of unfair treatment of the servers, for whom tips (at least in restaurants in the United States) are a major component of pay.\n",
    "\n",
    "In one restaurant, a food server recorded the following data on all customers they served during an interval of two and a half months in early 1990. The restaurant, located in a suburban shopping mall, was part of a national chain and served a varied menu. In observance of local law the restaurant offered seating in a non-smoking section to patrons who requested it. Each record includes a day and time, and taken together, they show the serverâ€™s work schedule.\n",
    "\n",
    "A complete description of the variables and their meanings is available in the data dictionary table below:\n",
    "\n",
    "|obs  | Observation number |\n",
    "|---  |---                 |\n",
    "| total_bill | Total bill (cost of the meal), including tax, in US dollars |\n",
    "| tip | Tip (gratuity) in US dollars |\n",
    "| sex | Sex of person paying for the meal (0=male, 1=female) |\n",
    "| smoker | Smoker in party? (0=No, 1=Yes) |\n",
    "| day | Day of Week (4=Thur, 5=Fri, 6=Sat, 7=Sun) |\n",
    "| time | Dinner, Lunch |\n",
    "|size  | Size of the party |"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b6bf859e",
   "metadata": {},
   "source": [
    "### Exercise 1: (1 points)\n",
    "<span  style=\"color:purple; font-size:16px\">Read in `tips.csv` data.</span>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c88d27a6",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f655bfe9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>total_bill</th>\n",
       "      <th>tip</th>\n",
       "      <th>sex</th>\n",
       "      <th>smoker</th>\n",
       "      <th>day</th>\n",
       "      <th>time</th>\n",
       "      <th>size</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>16.99</td>\n",
       "      <td>1.01</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>Dinner</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10.34</td>\n",
       "      <td>1.66</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>Dinner</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>21.01</td>\n",
       "      <td>3.50</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>Dinner</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>23.68</td>\n",
       "      <td>3.31</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>Dinner</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>24.59</td>\n",
       "      <td>3.61</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>Dinner</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   total_bill   tip  sex  smoker  day    time  size\n",
       "0       16.99  1.01    0       0    7  Dinner     2\n",
       "1       10.34  1.66    1       0    7  Dinner     3\n",
       "2       21.01  3.50    1       0    7  Dinner     3\n",
       "3       23.68  3.31    1       0    7  Dinner     2\n",
       "4       24.59  3.61    0       0    7  Dinner     4"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Exercise Answer\n",
    "\n",
    "#pd.read_csv reads the csv File\n",
    "tips_df = pd.read_csv('tips.csv')\n",
    "tips_df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4bc221dd",
   "metadata": {},
   "source": [
    "### Exercise 2: (2 points)\n",
    "<span  style=\"color:purple; font-size:16px\">Determine the number of rows and columns in the data. What does each row in the data represent?</span>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "4569acf0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(244, 7)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Exercise Answer\n",
    "\n",
    "#shape returns the number of rows and columns in the data\n",
    "tips_df.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b3102334",
   "metadata": {},
   "source": [
    "There are 244 Rows and 7 Coulumns in the data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "51e03c97",
   "metadata": {},
   "source": [
    "### Exercise 3: (3 points)\n",
    "<span  style=\"color:purple; font-size:16px\">Determine if there are any missing values in the data.</span>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "100d8052",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "total_bill    0\n",
       "tip           0\n",
       "sex           0\n",
       "smoker        0\n",
       "day           0\n",
       "time          0\n",
       "size          0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Exercise Answer\n",
    "\n",
    "#Using isnull().sum() to determine missing data\n",
    "tips_df.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1c39c1be",
   "metadata": {},
   "source": [
    "There are no missing values in the Data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d6c27027",
   "metadata": {},
   "source": [
    "### Exercise 4: (5 points)\n",
    "<span  style=\"color:purple; font-size:16px\">The column names are not very descriptive. Use the `.rename()` method to rename the columns.</span>\n",
    "\n",
    "Rename the columns as follows:\n",
    "+ `tip` to `tip_amount`\n",
    "+ `day` to `day_of_week`\n",
    "+ `size` to `party_size`\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "759af5ee",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Exercise Answer\n",
    "\n",
    "#Using rename() method to rename the columns\n",
    "rename_columns = {'tip':'tip_amount', 'day':'day_of_week', 'size':'party_size'}\n",
    "tips_df.rename(columns = rename_columns , inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "903ac759",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['total_bill', 'tip_amount', 'sex', 'smoker', 'day_of_week', 'time',\n",
       "       'party_size'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tips_df.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ffa80af7",
   "metadata": {},
   "source": [
    "### Exercise 5: (5 points)\n",
    "<span  style=\"color:purple; font-size:16px\">Extract the index using tips.index(). What type of index do you find? Is there a sensical column to use for the index? Why or why not?</span>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "7d799b93",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RangeIndex(start=0, stop=244, step=1)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Exercise Answer\n",
    "tips_df.index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "4d28c954",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "pandas.core.indexes.range.RangeIndex"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(tips_df.index)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "956eb5f0",
   "metadata": {},
   "source": [
    "- So the index of tips_df is Range Index which is the default index.\n",
    "- We can refer to each tip by the bill amount (total_bill) (by using meaningful Index). Though we have total_bill column it is not useful data to perform analysis on,  bills are just convenient labels which are useful to understand which bill the tips refer to. \n",
    "- We can refer to tip by integer location (using the default RangeIndex)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d0e47029",
   "metadata": {},
   "source": [
    "### Exercise 6: (5 points)\n",
    "<span  style=\"color:purple; font-size:16px\">Recode the `sex`, `smoker`, and `day_of_week` variables to the coding in the data dictionary description table at the top of the notebook. For example: recode `day_of_week` from the numeric representation (4, 5, 6, 7) to the ('Thur', 'Fri', 'Sat', 'Sun'). </span>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "9f30a737",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "50     Sun\n",
       "20     Sat\n",
       "105    Sat\n",
       "225    Fri\n",
       "11     Sun\n",
       "Name: day_of_week, dtype: object"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Exercise Answer\n",
    "\n",
    "#recoding `day_of_week` from the numeric representation 4, 5, 6, 7 to the 'Thur', 'Fri', 'Sat', 'Sun'\n",
    "dayofweek_replace = {4: 'Thur', 5:'Fri', 6:'Sat', 7:'Sun'}\n",
    "tips_df['day_of_week'].replace(dayofweek_replace, inplace=True)\n",
    "tips_df['day_of_week'].sample(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "26973e64",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      male\n",
       "1    female\n",
       "2    female\n",
       "3    female\n",
       "4      male\n",
       "Name: sex, dtype: object"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#recoding sex from 0 to male, 1 to female)\n",
    "sex_replace = {0: 'male', 1:'female'}\n",
    "tips_df['sex'].replace(sex_replace, inplace=True)\n",
    "tips_df['sex'].head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "02023783",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "239     No\n",
       "151     No\n",
       "172    Yes\n",
       "218    Yes\n",
       "77      No\n",
       "Name: smoker, dtype: object"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#recoding smoker from 0 to No, 1 to Yes\n",
    "smoker_replace = {0: 'No', 1:'Yes'}\n",
    "tips_df['smoker'].replace(smoker_replace, inplace=True)\n",
    "tips_df['smoker'].sample(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "fea48154",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>total_bill</th>\n",
       "      <th>tip_amount</th>\n",
       "      <th>sex</th>\n",
       "      <th>smoker</th>\n",
       "      <th>day_of_week</th>\n",
       "      <th>time</th>\n",
       "      <th>party_size</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>160</th>\n",
       "      <td>21.50</td>\n",
       "      <td>3.50</td>\n",
       "      <td>female</td>\n",
       "      <td>No</td>\n",
       "      <td>Sun</td>\n",
       "      <td>Dinner</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>16.29</td>\n",
       "      <td>3.71</td>\n",
       "      <td>female</td>\n",
       "      <td>No</td>\n",
       "      <td>Sun</td>\n",
       "      <td>Dinner</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>240</th>\n",
       "      <td>27.18</td>\n",
       "      <td>2.00</td>\n",
       "      <td>male</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Sat</td>\n",
       "      <td>Dinner</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>93</th>\n",
       "      <td>16.32</td>\n",
       "      <td>4.30</td>\n",
       "      <td>male</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Fri</td>\n",
       "      <td>Dinner</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>13.37</td>\n",
       "      <td>2.00</td>\n",
       "      <td>female</td>\n",
       "      <td>No</td>\n",
       "      <td>Sat</td>\n",
       "      <td>Dinner</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     total_bill  tip_amount     sex smoker day_of_week    time  party_size\n",
       "160       21.50        3.50  female     No         Sun  Dinner           4\n",
       "17        16.29        3.71  female     No         Sun  Dinner           3\n",
       "240       27.18        2.00    male    Yes         Sat  Dinner           2\n",
       "93        16.32        4.30    male    Yes         Fri  Dinner           2\n",
       "26        13.37        2.00  female     No         Sat  Dinner           2"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tips_df.sample(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a1d3d4f7",
   "metadata": {},
   "source": [
    "### Exercise 7: (4 points)\n",
    "<span  style=\"color:purple; font-size:16px\">How many people were in the largest party served by the waiter? The smallest?</span>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "e1b0f476",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "125    6\n",
       "Name: party_size, dtype: int64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Exercise Answer\n",
    "#Using nlargest(1) method to get the Largest Value of Party size\n",
    "# sort ascending = False also works, tips_df['party_size'].sort_values(ascending=False).head(1)\n",
    "\n",
    "tips_df['party_size'].nlargest(1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e7a78f24",
   "metadata": {},
   "source": [
    "There were 6 people in the largest party served by the waiter."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "e903f5e8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "67    1\n",
       "Name: party_size, dtype: int64"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Using nsmallest(1) method to get the Smallest Value of Party size\n",
    "# sort ascending = true also works, tips_df['party_size'].sort_values(ascending=True).head(1)\n",
    "\n",
    "tips_df['party_size'].nsmallest(1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d3f40efd",
   "metadata": {},
   "source": [
    "There was only 1 person in the smallest party served by the waiter."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8a868ba9",
   "metadata": {},
   "source": [
    "### Exercise 8: (5 points)\n",
    "<span  style=\"color:purple; font-size:16px\">Create a histogram of the `total_bill` variable using 20 bins. Include a title and customize at least one other aspect of the plot. </span>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "19a911c8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:title={'center':'Histogram of Total Bill'}, ylabel='Frequency'>"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Exercise Answer\n",
    "#Histogram of the Total Bill\n",
    "tips_df['total_bill'].plot(kind = 'hist',\n",
    "                        bins = 20,\n",
    "                        title = 'Histogram of Total Bill',\n",
    "                        grid = True,\n",
    "                        xlim = (0,55),\n",
    "                        ylim = (0,45),\n",
    "                        figsize = (15,8),\n",
    "                        xlabel = 'Total Bill'\n",
    "                       )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c2bef41b",
   "metadata": {},
   "source": [
    "### Exercise 9: (4 points)\n",
    "<span  style=\"color:purple; font-size:16px\">What is a 'typical' bill size? Is mean or median better when you say typical?</span>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "384c746f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "17.795"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Exercise Answer\n",
    "tips_df['total_bill'].median()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "77f1d858",
   "metadata": {},
   "source": [
    "Median is accurate when we say typical. So the typical bill is 17.795"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d506b0ed",
   "metadata": {},
   "source": [
    "### Exercise 10: (6 points)\n",
    "<span  style=\"color:purple; font-size:16px\">Create a new variable, `tip_rate` which is the `tip_amount` divided by `total_bill`. Create a histogram of the new variable. </span>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "4a329f98",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    0.059447\n",
       "1    0.160542\n",
       "2    0.166587\n",
       "3    0.139780\n",
       "4    0.146808\n",
       "Name: tip_rate, dtype: float64"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Exercise Answer\n",
    "tips_df['tip_rate'] = tips_df['tip_amount'] / tips_df['total_bill']\n",
    "tips_df['tip_rate'].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "7ae5feee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:title={'center':'Histogram of Tip Rate'}, ylabel='Frequency'>"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "tips_df['tip_rate'].plot(kind = 'hist',\n",
    "                        bins = 20,\n",
    "                        title = 'Histogram of Tip Rate',\n",
    "                        grid = True,\n",
    "                        xlim = (0,1),\n",
    "                        ylim = (0,90),\n",
    "                        figsize = (15,8)\n",
    "                       )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5818229a",
   "metadata": {},
   "source": [
    "### Exercise 11: (5 points)\n",
    "<span  style=\"color:purple; font-size:16px\">Extract the entire row of data for the 10 largest and 10 smallest values of `tip_rate`. This can be done different ways but these steps are one way. First, extract the 10 largest values and save this as a DataFrame called 'largest'. Create a new variable called 'largest_indexes' which is the index of 'largest'. Use the `.loc()` method to extract all the data corresponding to those indexes.</span>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "d7739977",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "172    0.710345\n",
       "178    0.416667\n",
       "67     0.325733\n",
       "232    0.291990\n",
       "183    0.280535\n",
       "109    0.279525\n",
       "149    0.266312\n",
       "93     0.263480\n",
       "221    0.259314\n",
       "51     0.252672\n",
       "Name: tip_rate, dtype: float64"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Exercise Answer\n",
    "largest = tips_df['tip_rate'].nlargest(10)\n",
    "largest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "90cd5117",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Int64Index([172, 178, 67, 232, 183, 109, 149, 93, 221, 51], dtype='int64')"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "largest_indexes = largest.index\n",
    "largest_indexes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "0db5e9df",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Entire Row of 10 Largest values of the Tip Rate\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>total_bill</th>\n",
       "      <th>tip_amount</th>\n",
       "      <th>sex</th>\n",
       "      <th>smoker</th>\n",
       "      <th>day_of_week</th>\n",
       "      <th>time</th>\n",
       "      <th>party_size</th>\n",
       "      <th>tip_rate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>172</th>\n",
       "      <td>7.25</td>\n",
       "      <td>5.15</td>\n",
       "      <td>female</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Sun</td>\n",
       "      <td>Dinner</td>\n",
       "      <td>2</td>\n",
       "      <td>0.710345</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>178</th>\n",
       "      <td>9.60</td>\n",
       "      <td>4.00</td>\n",
       "      <td>male</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Sun</td>\n",
       "      <td>Dinner</td>\n",
       "      <td>2</td>\n",
       "      <td>0.416667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67</th>\n",
       "      <td>3.07</td>\n",
       "      <td>1.00</td>\n",
       "      <td>male</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Sat</td>\n",
       "      <td>Dinner</td>\n",
       "      <td>1</td>\n",
       "      <td>0.325733</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>232</th>\n",
       "      <td>11.61</td>\n",
       "      <td>3.39</td>\n",
       "      <td>female</td>\n",
       "      <td>No</td>\n",
       "      <td>Sat</td>\n",
       "      <td>Dinner</td>\n",
       "      <td>2</td>\n",
       "      <td>0.291990</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>183</th>\n",
       "      <td>23.17</td>\n",
       "      <td>6.50</td>\n",
       "      <td>female</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Sun</td>\n",
       "      <td>Dinner</td>\n",
       "      <td>4</td>\n",
       "      <td>0.280535</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>109</th>\n",
       "      <td>14.31</td>\n",
       "      <td>4.00</td>\n",
       "      <td>male</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Sat</td>\n",
       "      <td>Dinner</td>\n",
       "      <td>2</td>\n",
       "      <td>0.279525</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>149</th>\n",
       "      <td>7.51</td>\n",
       "      <td>2.00</td>\n",
       "      <td>female</td>\n",
       "      <td>No</td>\n",
       "      <td>Thur</td>\n",
       "      <td>Lunch</td>\n",
       "      <td>2</td>\n",
       "      <td>0.266312</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>93</th>\n",
       "      <td>16.32</td>\n",
       "      <td>4.30</td>\n",
       "      <td>male</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Fri</td>\n",
       "      <td>Dinner</td>\n",
       "      <td>2</td>\n",
       "      <td>0.263480</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>221</th>\n",
       "      <td>13.42</td>\n",
       "      <td>3.48</td>\n",
       "      <td>male</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Fri</td>\n",
       "      <td>Lunch</td>\n",
       "      <td>2</td>\n",
       "      <td>0.259314</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51</th>\n",
       "      <td>10.29</td>\n",
       "      <td>2.60</td>\n",
       "      <td>male</td>\n",
       "      <td>No</td>\n",
       "      <td>Sun</td>\n",
       "      <td>Dinner</td>\n",
       "      <td>2</td>\n",
       "      <td>0.252672</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     total_bill  tip_amount     sex smoker day_of_week    time  party_size  \\\n",
       "172        7.25        5.15  female    Yes         Sun  Dinner           2   \n",
       "178        9.60        4.00    male    Yes         Sun  Dinner           2   \n",
       "67         3.07        1.00    male    Yes         Sat  Dinner           1   \n",
       "232       11.61        3.39  female     No         Sat  Dinner           2   \n",
       "183       23.17        6.50  female    Yes         Sun  Dinner           4   \n",
       "109       14.31        4.00    male    Yes         Sat  Dinner           2   \n",
       "149        7.51        2.00  female     No        Thur   Lunch           2   \n",
       "93        16.32        4.30    male    Yes         Fri  Dinner           2   \n",
       "221       13.42        3.48    male    Yes         Fri   Lunch           2   \n",
       "51        10.29        2.60    male     No         Sun  Dinner           2   \n",
       "\n",
       "     tip_rate  \n",
       "172  0.710345  \n",
       "178  0.416667  \n",
       "67   0.325733  \n",
       "232  0.291990  \n",
       "183  0.280535  \n",
       "109  0.279525  \n",
       "149  0.266312  \n",
       "93   0.263480  \n",
       "221  0.259314  \n",
       "51   0.252672  "
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print('Entire Row of 10 Largest values of the Tip Rate')\n",
    "tips_df.loc[largest_indexes,:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "c50be0d0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "237    0.035638\n",
       "102    0.056433\n",
       "57     0.056797\n",
       "0      0.059447\n",
       "187    0.065660\n",
       "210    0.066534\n",
       "48     0.071804\n",
       "146    0.072961\n",
       "240    0.073584\n",
       "184    0.073983\n",
       "Name: tip_rate, dtype: float64"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "smallest = tips_df['tip_rate'].nsmallest(10)\n",
    "smallest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "9361f617",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Int64Index([237, 102, 57, 0, 187, 210, 48, 146, 240, 184], dtype='int64')"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "smallest_indexes = smallest.index\n",
    "smallest_indexes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "6a2dc926",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Entire Row of 10 Smallest values of the Tip Rate\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>total_bill</th>\n",
       "      <th>tip_amount</th>\n",
       "      <th>sex</th>\n",
       "      <th>smoker</th>\n",
       "      <th>day_of_week</th>\n",
       "      <th>time</th>\n",
       "      <th>party_size</th>\n",
       "      <th>tip_rate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>237</th>\n",
       "      <td>32.83</td>\n",
       "      <td>1.17</td>\n",
       "      <td>female</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Sat</td>\n",
       "      <td>Dinner</td>\n",
       "      <td>2</td>\n",
       "      <td>0.035638</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>102</th>\n",
       "      <td>44.30</td>\n",
       "      <td>2.50</td>\n",
       "      <td>male</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Sat</td>\n",
       "      <td>Dinner</td>\n",
       "      <td>3</td>\n",
       "      <td>0.056433</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57</th>\n",
       "      <td>26.41</td>\n",
       "      <td>1.50</td>\n",
       "      <td>male</td>\n",
       "      <td>No</td>\n",
       "      <td>Sat</td>\n",
       "      <td>Dinner</td>\n",
       "      <td>2</td>\n",
       "      <td>0.056797</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>16.99</td>\n",
       "      <td>1.01</td>\n",
       "      <td>male</td>\n",
       "      <td>No</td>\n",
       "      <td>Sun</td>\n",
       "      <td>Dinner</td>\n",
       "      <td>2</td>\n",
       "      <td>0.059447</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>187</th>\n",
       "      <td>30.46</td>\n",
       "      <td>2.00</td>\n",
       "      <td>female</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Sun</td>\n",
       "      <td>Dinner</td>\n",
       "      <td>5</td>\n",
       "      <td>0.065660</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>210</th>\n",
       "      <td>30.06</td>\n",
       "      <td>2.00</td>\n",
       "      <td>female</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Sat</td>\n",
       "      <td>Dinner</td>\n",
       "      <td>3</td>\n",
       "      <td>0.066534</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>28.55</td>\n",
       "      <td>2.05</td>\n",
       "      <td>female</td>\n",
       "      <td>No</td>\n",
       "      <td>Sun</td>\n",
       "      <td>Dinner</td>\n",
       "      <td>3</td>\n",
       "      <td>0.071804</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>146</th>\n",
       "      <td>18.64</td>\n",
       "      <td>1.36</td>\n",
       "      <td>male</td>\n",
       "      <td>No</td>\n",
       "      <td>Thur</td>\n",
       "      <td>Lunch</td>\n",
       "      <td>3</td>\n",
       "      <td>0.072961</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>240</th>\n",
       "      <td>27.18</td>\n",
       "      <td>2.00</td>\n",
       "      <td>male</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Sat</td>\n",
       "      <td>Dinner</td>\n",
       "      <td>2</td>\n",
       "      <td>0.073584</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>184</th>\n",
       "      <td>40.55</td>\n",
       "      <td>3.00</td>\n",
       "      <td>female</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Sun</td>\n",
       "      <td>Dinner</td>\n",
       "      <td>2</td>\n",
       "      <td>0.073983</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     total_bill  tip_amount     sex smoker day_of_week    time  party_size  \\\n",
       "237       32.83        1.17  female    Yes         Sat  Dinner           2   \n",
       "102       44.30        2.50    male    Yes         Sat  Dinner           3   \n",
       "57        26.41        1.50    male     No         Sat  Dinner           2   \n",
       "0         16.99        1.01    male     No         Sun  Dinner           2   \n",
       "187       30.46        2.00  female    Yes         Sun  Dinner           5   \n",
       "210       30.06        2.00  female    Yes         Sat  Dinner           3   \n",
       "48        28.55        2.05  female     No         Sun  Dinner           3   \n",
       "146       18.64        1.36    male     No        Thur   Lunch           3   \n",
       "240       27.18        2.00    male    Yes         Sat  Dinner           2   \n",
       "184       40.55        3.00  female    Yes         Sun  Dinner           2   \n",
       "\n",
       "     tip_rate  \n",
       "237  0.035638  \n",
       "102  0.056433  \n",
       "57   0.056797  \n",
       "0    0.059447  \n",
       "187  0.065660  \n",
       "210  0.066534  \n",
       "48   0.071804  \n",
       "146  0.072961  \n",
       "240  0.073584  \n",
       "184  0.073983  "
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print('Entire Row of 10 Smallest values of the Tip Rate')\n",
    "tips_df.loc[smallest_indexes,:]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "803f27fa",
   "metadata": {},
   "source": [
    "### Exercise 12: (5 points)\n",
    "<span  style=\"color:purple; font-size:16px\">Create a bar graph showing the number of parties served on each day of the week. What day had the heaviest volume (in terms of number of tables served)? What day had the lowest volume?</span>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "bdef5d4c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:title={'center':'Bar Graph Showing Proportion of the Car'}>"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Exercise Answer\n",
    "tips_df['day_of_week'].value_counts(normalize=True).plot(kind='bar',\n",
    "                                                   title='Bar Graph Showing Proportion of the Car',\n",
    "                                                   rot =45,\n",
    "                                                   figsize=(10,5))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dec2ef7c",
   "metadata": {},
   "source": [
    "### Exercise 13: (5 points)\n",
    "<span  style=\"color:purple; font-size:16px\">Find the total number of orders where the `total_bill` is greater than 40 dollars AND the party size was 4 or less.</span>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "ae688d7c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total number of orders where the total bill > 40 dollars and the party size was 4 or less is: 8\n"
     ]
    }
   ],
   "source": [
    "# Exercise Answer\n",
    "filt = (tips_df['total_bill'] > 40) & (tips_df['party_size'] <= 4)\n",
    "\n",
    "# Calculating total number of orders using sum()\n",
    "Tot_orders = filt.sum()\n",
    "print(f'Total number of orders where the total bill > 40 dollars and the party size was 4 or less is: {Tot_orders}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "60f2773a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>total_bill</th>\n",
       "      <th>tip_amount</th>\n",
       "      <th>sex</th>\n",
       "      <th>smoker</th>\n",
       "      <th>day_of_week</th>\n",
       "      <th>time</th>\n",
       "      <th>party_size</th>\n",
       "      <th>tip_rate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>59</th>\n",
       "      <td>48.27</td>\n",
       "      <td>6.73</td>\n",
       "      <td>female</td>\n",
       "      <td>No</td>\n",
       "      <td>Sat</td>\n",
       "      <td>Dinner</td>\n",
       "      <td>4</td>\n",
       "      <td>0.139424</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>40.17</td>\n",
       "      <td>4.73</td>\n",
       "      <td>female</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Fri</td>\n",
       "      <td>Dinner</td>\n",
       "      <td>4</td>\n",
       "      <td>0.117750</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>102</th>\n",
       "      <td>44.30</td>\n",
       "      <td>2.50</td>\n",
       "      <td>male</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Sat</td>\n",
       "      <td>Dinner</td>\n",
       "      <td>3</td>\n",
       "      <td>0.056433</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>170</th>\n",
       "      <td>50.81</td>\n",
       "      <td>10.00</td>\n",
       "      <td>female</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Sat</td>\n",
       "      <td>Dinner</td>\n",
       "      <td>3</td>\n",
       "      <td>0.196812</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>182</th>\n",
       "      <td>45.35</td>\n",
       "      <td>3.50</td>\n",
       "      <td>female</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Sun</td>\n",
       "      <td>Dinner</td>\n",
       "      <td>3</td>\n",
       "      <td>0.077178</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>184</th>\n",
       "      <td>40.55</td>\n",
       "      <td>3.00</td>\n",
       "      <td>female</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Sun</td>\n",
       "      <td>Dinner</td>\n",
       "      <td>2</td>\n",
       "      <td>0.073983</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>197</th>\n",
       "      <td>43.11</td>\n",
       "      <td>5.00</td>\n",
       "      <td>male</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Thur</td>\n",
       "      <td>Lunch</td>\n",
       "      <td>4</td>\n",
       "      <td>0.115982</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>212</th>\n",
       "      <td>48.33</td>\n",
       "      <td>9.00</td>\n",
       "      <td>female</td>\n",
       "      <td>No</td>\n",
       "      <td>Sat</td>\n",
       "      <td>Dinner</td>\n",
       "      <td>4</td>\n",
       "      <td>0.186220</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     total_bill  tip_amount     sex smoker day_of_week    time  party_size  \\\n",
       "59        48.27        6.73  female     No         Sat  Dinner           4   \n",
       "95        40.17        4.73  female    Yes         Fri  Dinner           4   \n",
       "102       44.30        2.50    male    Yes         Sat  Dinner           3   \n",
       "170       50.81       10.00  female    Yes         Sat  Dinner           3   \n",
       "182       45.35        3.50  female    Yes         Sun  Dinner           3   \n",
       "184       40.55        3.00  female    Yes         Sun  Dinner           2   \n",
       "197       43.11        5.00    male    Yes        Thur   Lunch           4   \n",
       "212       48.33        9.00  female     No         Sat  Dinner           4   \n",
       "\n",
       "     tip_rate  \n",
       "59   0.139424  \n",
       "95   0.117750  \n",
       "102  0.056433  \n",
       "170  0.196812  \n",
       "182  0.077178  \n",
       "184  0.073983  \n",
       "197  0.115982  \n",
       "212  0.186220  "
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tips_df.loc[filt, :]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1cf248e8",
   "metadata": {},
   "source": [
    "### Exercise 14: (5 points)\n",
    "<span  style=\"color:purple; font-size:16px\">Who pays the bill more often: men or women? Create a pie chart and create a Series showing the proportion of bills paid by each `sex`.</span>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "4a49174e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Exercise Answer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "5dfe6229",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:title={'center':'Pie Chart showing proportion of bills paid by each Sex'}, ylabel='sex'>"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create pie chart, with some added features\n",
    "tips_df['sex'].value_counts(normalize=True).plot(kind='pie',\n",
    "                                                   title='Pie Chart showing proportion of bills paid by each Sex',\n",
    "                                                   figsize=(10,5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "869e9a52",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0        male\n",
       "1      female\n",
       "2      female\n",
       "3      female\n",
       "4        male\n",
       "        ...  \n",
       "239    female\n",
       "240      male\n",
       "241    female\n",
       "242    female\n",
       "243      male\n",
       "Name: sex, Length: 244, dtype: object"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tips_by_sex = pd.Series(tips_df['sex'])\n",
    "tips_by_sex"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "7d7e6bf9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "female    157\n",
       "male       87\n",
       "Name: sex, dtype: int64"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.Series(tips_df['sex'].value_counts())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f1279f3e",
   "metadata": {},
   "source": [
    "Female Pay the Bill More often"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
